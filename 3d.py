from gturtle import *
from math import *


makeTurtle()

screen_size = 2600

def draw_triangle(pos):
    setPos(pos[0])
    startPath()
    moveTo(pos[1])
    moveTo(pos[2])
    #moveTo(pos[0]) #
    fillPath()

def matrix_multiply(matrix, vector):
    return [sum(row[j] * vector[j] for j in range(len(vector))) for row in matrix]
    
def add(vec1, vec2):
    return [x + y for x, y in zip(vec1, vec2)]

def sub(vec1, vec2):
    return [x - y for x, y in zip(vec1, vec2)]
    
def mul(vec, scalar):
    return [x * scalar for x in vec]
    
def div(vec, scalar):
    return [x / scalar for x in vec]
    
def dot_product(vector1, vector2):
    return sum(x * y for x, y in zip(vector1, vector2))

def cross_product(v1, v2):
    return [v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0]]
    
def normalize(vector):
    length = sqrt(sum(x * x for x in vector))
    return [x / length for x in vector] if length != 0 else vector

def perspective_matrix(aspect_ratio, fov_y, near, far):
    tan_half_fov_y = tan(fov_y / 2)
    range_inv = 1 / (far - near)

    return [
        [1 / (aspect_ratio * tan_half_fov_y), 0, 0, 0],
        [0, 1 / tan_half_fov_y, 0, 0],
        [0, 0, -(far + near) * range_inv, -2 * far * near * range_inv],
        [0, 0, -1, 0]
    ]

def translation_matrix(translation_vector):
    return [
        [1, 0, 0, translation_vector[0]],
        [0, 1, 0, translation_vector[1]],
        [0, 0, 1, translation_vector[2]],
        [0, 0, 0, 1]
    ]

def scale_matrix(scale_vector):
    return [
        [scale_vector[0], 0, 0, 0],
        [0, scale_vector[1], 0, 0],
        [0, 0, scale_vector[2], 0],
        [0, 0, 0, 1]
    ]




def project_vertices(vertices, projection_matrix):
    projected_vertices = []
    for vertex in vertices:
        projected_vertex = matrix_multiply(projection_matrix, vertex + [1])
        scale = (1 / projected_vertex[3]) * screen_size
        projected_vertices.append([projected_vertex[0]*scale, projected_vertex[1]*scale, projected_vertex[2]])
    return projected_vertices

def translate(vertices, translation_vector):
    translation_matrix_ = translation_matrix(translation_vector)
    translated_vertices = [matrix_multiply(translation_matrix_, vertex + [1])[:3] for vertex in vertices]
    return translated_vertices

def scale(vertices, scale_vector):
    scale_matrix_ = scale_matrix(scale_vector)
    scaled_vertices = [matrix_multiply(scale_matrix_, vertex + [1])[:3] for vertex in vertices]
    return scaled_vertices
    
def rotate_x(vertices, theta):
    rotation_matrix_x = [
        [1, 0, 0, 0],
        [0, cos(theta), -sin(theta), 0],
        [0, sin(theta), cos(theta), 0],
        [0, 0, 0, 1]
    ]
    return [matrix_multiply(rotation_matrix_x, vertex + [1])[:3] for vertex in vertices]

def rotate_y(vertices, theta):
    rotation_matrix_y = [
        [cos(theta), 0, sin(theta), 0],
        [0, 1, 0, 0],
        [-sin(theta), 0, cos(theta), 0],
        [0, 0, 0, 1]
    ]
    return [matrix_multiply(rotation_matrix_y, vertex + [1])[:3] for vertex in vertices]

def rotate_z(vertices, theta):
    rotation_matrix_z = [
        [cos(theta), -sin(theta), 0, 0],
        [sin(theta), cos(theta), 0, 0],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ]
    return [matrix_multiply(rotation_matrix_z, vertex + [1])[:3] for vertex in vertices]

def rotate(vertices, angles):
    rx, ry, rz = angles
    rotated_vertices = rotate_x(vertices, rx)
    rotated_vertices = rotate_y(rotated_vertices, ry)
    rotated_vertices = rotate_z(rotated_vertices, rz)
    return rotated_vertices
    
def compute_normal(pos):
    vector1 = sub(pos[0], pos[1])
    vector2 = sub(pos[2], pos[1])
    
    normal = cross_product(vector1, vector2)
    
    
    return normalize(normal)

def poly_sort(poly):
    return -(pv[poly[0]][2] + pv[poly[1]][2] + pv[poly[2]][2])

projection_matrix = perspective_matrix(1, radians(150), 0.1, 100)


vertices = [[-1.0, -1.0, 1.0], [-1.0, 1.0, 1.0], [-1.0, -1.0, -1.0], [-1.0, 1.0, -1.0], [1.0, -1.0, 1.0], [1.0, 1.0, 1.0], [1.0, -1.0, -1.0], [1.0, 1.0, -1.0], [0.0, 1.151714, 0.0], [0.7236, 1.704499, 0.52572], [-0.276385, 1.704499, 0.85064], [-0.894425, 1.704499, 0.0], [-0.276385, 1.704499, -0.85064], [0.7236, 1.704499, -0.52572], [0.276385, 2.598929, 0.85064], [-0.7236, 2.598929, 0.52572], [-0.7236, 2.598929, -0.52572], [0.276385, 2.598929, -0.85064], [0.894425, 2.598929, 0.0], [0.0, 3.151714, 0.0], [2.806776, -0.686786, -1.203428], [3.951304, -0.686786, -0.37188], [3.514133, -0.686786, 0.973594], [2.099419, -0.686786, 0.973594], [1.662248, -0.686786, -0.37188], [2.806776, 0.686786, 0.0], [-2.777166, -0.91434, -0.76346], [-2.777166, 0.91434, -0.76346], [-2.395437, -0.91434, -0.661176], [-2.395437, 0.91434, -0.661176], [-2.115991, -0.91434, -0.38173], [-2.115991, 0.91434, -0.38173], [-2.013707, -0.91434, 0.0], [-2.013707, 0.91434, 0.0], [-2.115991, -0.91434, 0.38173], [-2.115991, 0.91434, 0.38173], [-2.395437, -0.91434, 0.661176], [-2.395437, 0.91434, 0.661176], [-2.777166, -0.91434, 0.76346], [-2.777166, 0.91434, 0.76346], [-3.158896, -0.91434, 0.661176], [-3.158896, 0.91434, 0.661176], [-3.438342, -0.91434, 0.38173], [-3.438342, 0.91434, 0.38173], [-3.540626, -0.91434, 0.0], [-3.540626, 0.91434, 0.0], [-3.438342, -0.91434, -0.38173], [-3.438342, 0.91434, -0.38173], [-3.158896, -0.91434, -0.661176], [-3.158896, 0.91434, -0.661176], [1.44, 0.0, 2.71], [1.22, 0.381051, 2.71], [0.78, 0.381051, 2.71], [0.56, 0.0, 2.71], [0.78, -0.381051, 2.71], [1.22, -0.381051, 2.71], [0.897825, 0.0, 1.584163], [0.760657, 0.381051, 1.756166], [0.486322, 0.381051, 2.100171], [0.349154, 0.0, 2.272174], [0.486322, -0.381051, 2.100172], [0.760657, -0.381051, 1.756166], [-0.32043, 0.0, 1.306104], [-0.271476, 0.381051, 1.520588], [-0.173566, 0.381051, 1.949556], [-0.124612, 0.0, 2.16404], [-0.173566, -0.381051, 1.949556], [-0.271476, -0.381051, 1.520588], [-1.297395, 0.0, 2.085207], [-1.099182, 0.381051, 2.180662], [-0.702756, 0.381051, 2.371571], [-0.504543, 0.0, 2.467025], [-0.702756, -0.381051, 2.371571], [-1.099182, -0.381051, 2.180662], [-1.297395, 0.0, 3.334792], [-1.099182, 0.381051, 3.239338], [-0.702756, 0.381051, 3.048429], [-0.504543, 0.0, 2.952975], [-0.702756, -0.381051, 3.048429], [-1.099182, -0.381051, 3.239338], [-0.32043, 0.0, 4.113896], [-0.271476, 0.381051, 3.899412], [-0.173566, 0.381051, 3.470444], [-0.124612, 0.0, 3.25596], [-0.173566, -0.381051, 3.470444], [-0.271476, -0.381051, 3.899412], [0.897825, 0.0, 3.835838], [0.760657, 0.381051, 3.663835], [0.486322, 0.381051, 3.319829], [0.349154, 0.0, 3.147826], [0.486322, -0.381051, 3.319829], [0.760657, -0.381051, 3.663835], [0.0, 0.35, -2.88211], [0.0, -0.8, -2.88211], [0.6, 0.35, -2.88211], [1.0, 0.0, -2.88211], [0.374094, 0.35, -2.413011], [0.62349, 0.0, -2.100278], [-0.133513, 0.35, -2.297153], [-0.222521, 0.0, -1.907182], [-0.540581, 0.35, -2.621779], [-0.900969, 0.0, -2.448226], [-0.540581, 0.35, -3.14244], [-0.900969, 0.0, -3.315993], [-0.133513, 0.35, -3.467066], [-0.222521, 0.0, -3.857038], [0.374094, 0.35, -3.351209], [0.623489, 0.0, -3.663941]]
faces = [[1, 2, 0], [3, 6, 2], [7, 4, 6], [5, 0, 4], [6, 0, 2], [3, 5, 7], [1, 3, 2], [3, 7, 6], [7, 5, 4], [5, 1, 0], [6, 4, 0], [3, 1, 5], [8, 9, 10], [9, 8, 13], [8, 10, 11], [8, 11, 12], [8, 12, 13], [9, 13, 18], [10, 9, 14], [11, 10, 15], [12, 11, 16], [13, 12, 17], [9, 18, 14], [10, 14, 15], [11, 15, 16], [12, 16, 17], [13, 17, 18], [14, 18, 19], [15, 14, 19], [16, 15, 19], [17, 16, 19], [18, 17, 19], [20, 25, 21], [21, 25, 22], [22, 25, 23], [21, 23, 24], [23, 25, 24], [24, 25, 20], [24, 20, 21], [21, 22, 23], [27, 28, 26], [29, 30, 28], [31, 32, 30], [33, 34, 32], [35, 36, 34], [37, 38, 36], [39, 40, 38], [41, 42, 40], [43, 44, 42], [45, 46, 44], [47, 39, 31], [47, 48, 46], [49, 26, 48], [32, 40, 48], [27, 29, 28], [29, 31, 30], [31, 33, 32], [33, 35, 34], [35, 37, 36], [37, 39, 38], [39, 41, 40], [41, 43, 42], [43, 45, 44], [45, 47, 46], [31, 29, 27], [27, 49, 47], [47, 45, 43], [43, 41, 39], [39, 37, 35], [35, 33, 31], [31, 27, 47], [47, 43, 39], [39, 35, 31], [47, 49, 48], [49, 27, 26], [48, 26, 28], [28, 30, 32], [32, 34, 36], [36, 38, 40], [40, 42, 44], [44, 46, 48], [48, 28, 32], [32, 36, 40], [40, 44, 48], [56, 51, 50], [51, 58, 52], [52, 59, 53], [59, 54, 53], [60, 55, 54], [61, 50, 55], [62, 57, 56], [63, 58, 57], [58, 65, 59], [65, 60, 59], [66, 61, 60], [61, 62, 56], [68, 63, 62], [69, 64, 63], [70, 65, 64], [71, 66, 65], [72, 67, 66], [73, 62, 67], [74, 69, 68], [75, 70, 69], [76, 71, 70], [77, 72, 71], [72, 79, 73], [79, 68, 73], [80, 75, 74], [81, 76, 75], [82, 77, 76], [83, 78, 77], [84, 79, 78], [79, 80, 74], [86, 81, 80], [81, 88, 82], [88, 83, 82], [89, 84, 83], [90, 85, 84], [91, 80, 85], [86, 51, 87], [51, 88, 87], [52, 89, 88], [53, 90, 89], [54, 91, 90], [91, 50, 86], [56, 57, 51], [51, 57, 58], [52, 58, 59], [59, 60, 54], [60, 61, 55], [61, 56, 50], [62, 63, 57], [63, 64, 58], [58, 64, 65], [65, 66, 60], [66, 67, 61], [61, 67, 62], [68, 69, 63], [69, 70, 64], [70, 71, 65], [71, 72, 66], [72, 73, 67], [73, 68, 62], [74, 75, 69], [75, 76, 70], [76, 77, 71], [77, 78, 72], [72, 78, 79], [79, 74, 68], [80, 81, 75], [81, 82, 76], [82, 83, 77], [83, 84, 78], [84, 85, 79], [79, 85, 80], [86, 87, 81], [81, 87, 88], [88, 89, 83], [89, 90, 84], [90, 91, 85], [91, 86, 80], [86, 50, 51], [51, 52, 88], [52, 53, 89], [53, 54, 90], [54, 55, 91], [91, 55, 50], [95, 93, 107], [93, 95, 97], [93, 97, 99], [93, 99, 101], [93, 101, 103], [93, 103, 105], [93, 105, 107], [95, 106, 94], [94, 97, 95], [96, 99, 97], [98, 101, 99], [100, 103, 101], [102, 105, 103], [104, 107, 105], [92, 94, 106], [94, 92, 96], [96, 92, 98], [98, 92, 100], [100, 92, 102], [102, 92, 104], [104, 92, 106], [95, 107, 106], [94, 96, 97], [96, 98, 99], [98, 100, 101], [100, 102, 103], [102, 104, 105], [104, 106, 107]]
 


hideTurtle()

playground = getPlayground()
playground.enableRepaint(False)
setPenColor("Black")

r = 0
while True:
    tv = rotate_y(vertices, r)
    tv = rotate_x(tv, sin(r * 2)/3)
    tv = translate(tv, [0, 0, -7])
    
    
    pv = project_vertices(tv, projection_matrix)
    
    playground.clear()
    for i in sorted(faces, key=poly_sort):
        pos = [pv[i[0]], pv[i[1]], pv[i[2]]]
        avpos = div(add(add(tv[i[0]], tv[i[1]]), tv[i[2]]), 3)
        dif = max(dot_product(compute_normal([tv[i[0]], tv[i[1]], tv[i[2]]]), normalize(avpos)), 0.0)
        
        if dif > 0:
            dif = dif * 0.6 + 0.2
            color = (dif, 0, 0)
            setFillColor(color)
            setPenColor(color)
            draw_triangle(pos)

    playground.repaint()
    r += 0.005