from gturtle import *
from math import *


makeTurtle()


def draw_triangle(pos):
    setPos(pos[0])
    startPath()
    moveTo(pos[1])
    moveTo(pos[2])
    #moveTo(pos[0]) #
    fillPath()

def matrix_multiply(a, b):
    result = []

    if isinstance(a[0], (int, float)):
        a = [a]

    if isinstance(b[0], (int, float)):
        b = [b]

    for i in range(len(a)):
        row_result = []
        for j in range(len(b[0])):
            element_sum = sum(a[i][k] * b[k][j] for k in range(len(b)))
            row_result.append(element_sum)
        result.append(row_result)

    if len(result) == 1:
        return result[0]

    return result

def matrix_vector_multiply(matrix, vector):
    return [sum(row[j] * vector[j] for j in range(len(vector))) for row in matrix]
    
    
def add(vec1, vec2):
    return [x + y for x, y in zip(vec1, vec2)]

def sub(vec1, vec2):
    return [x - y for x, y in zip(vec1, vec2)]
    
def mul(vec, scalar):
    return [x * scalar for x in vec]
    
def div(vec, scalar):
    return [x / scalar for x in vec]
    
def dot_product(vector1, vector2):
    return sum(x * y for x, y in zip(vector1, vector2))

def cross_product(v1, v2):
    return [v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0]]
    
def normalize(vector):
    length = sqrt(sum(x * x for x in vector))
    return [x / length for x in vector] if length != 0 else vector



def perspective_matrix(aspect_ratio, fov_y, near, far, screen_size):
    tan_half_fov_y = tan(fov_y / 2)
    range_inv = 1 / (far - near)

    return [
        [screen_size / (aspect_ratio * tan_half_fov_y), 0, 0, 0],
        [0, screen_size / tan_half_fov_y, 0, 0],
        [0, 0, -(far + near) * range_inv, -2 * far * near * range_inv],
        [0, 0, -1, 0]
    ]

def translation_matrix(translation_vector):
    return [
        [1, 0, 0, translation_vector[0]],
        [0, 1, 0, translation_vector[1]],
        [0, 0, 1, translation_vector[2]],
        [0, 0, 0, 1]
    ]

def scale_matrix(scale_vector):
    return [
        [scale_vector[0], 0, 0, 0],
        [0, scale_vector[1], 0, 0],
        [0, 0, scale_vector[2], 0],
        [0, 0, 0, 1]
    ]

def rotation_matrix_x(theta):
    return [
        [1, 0, 0, 0],
        [0, cos(theta), -sin(theta), 0],
        [0, sin(theta), cos(theta), 0],
        [0, 0, 0, 1]
    ]

def rotation_matrix_y(theta):
    return [
        [cos(theta), 0, sin(theta), 0],
        [0, 1, 0, 0],
        [-sin(theta), 0, cos(theta), 0],
        [0, 0, 0, 1]
    ]

def rotation_matrix_z(theta):
    return [
        [cos(theta), -sin(theta), 0, 0],
        [sin(theta), cos(theta), 0, 0],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ]
    
def is_visible(pos):
    return (pos[2][1] - pos[0][1]) * (pos[1][0] - pos[0][0]) > (pos[1][1] - pos[0][1]) * (pos[2][0] - pos[0][0])

def poly_sort(poly):
    return -(tranf_verts[poly[0]][2] + tranf_verts[poly[1]][2] + tranf_verts[poly[2]][2])

projection_matrix = perspective_matrix(1, radians(90), 0.01, 100, 800)

vertices = [[-1.0, -1.0, 1.0], [-1.0, 1.0, 1.0], [-1.0, -1.0, -1.0], [-1.0, 1.0, -1.0], [1.0, -1.0, 1.0], [1.0, 1.0, 1.0], [1.0, -1.0, -1.0], [1.0, 1.0, -1.0], [0.0, 1.151714, 0.0], [0.7236, 1.704499, 0.52572], [-0.276385, 1.704499, 0.85064], [-0.894425, 1.704499, 0.0], [-0.276385, 1.704499, -0.85064], [0.7236, 1.704499, -0.52572], [0.276385, 2.598929, 0.85064], [-0.7236, 2.598929, 0.52572], [-0.7236, 2.598929, -0.52572], [0.276385, 2.598929, -0.85064], [0.894425, 2.598929, 0.0], [0.0, 3.151714, 0.0], [2.806776, -0.686786, -1.203428], [3.951304, -0.686786, -0.37188], [3.514133, -0.686786, 0.973594], [2.099419, -0.686786, 0.973594], [1.662248, -0.686786, -0.37188], [2.806776, 0.686786, 0.0], [-2.777166, -0.91434, -0.76346], [-2.777166, 0.91434, -0.76346], [-2.395437, -0.91434, -0.661176], [-2.395437, 0.91434, -0.661176], [-2.115991, -0.91434, -0.38173], [-2.115991, 0.91434, -0.38173], [-2.013707, -0.91434, 0.0], [-2.013707, 0.91434, 0.0], [-2.115991, -0.91434, 0.38173], [-2.115991, 0.91434, 0.38173], [-2.395437, -0.91434, 0.661176], [-2.395437, 0.91434, 0.661176], [-2.777166, -0.91434, 0.76346], [-2.777166, 0.91434, 0.76346], [-3.158896, -0.91434, 0.661176], [-3.158896, 0.91434, 0.661176], [-3.438342, -0.91434, 0.38173], [-3.438342, 0.91434, 0.38173], [-3.540626, -0.91434, 0.0], [-3.540626, 0.91434, 0.0], [-3.438342, -0.91434, -0.38173], [-3.438342, 0.91434, -0.38173], [-3.158896, -0.91434, -0.661176], [-3.158896, 0.91434, -0.661176], [1.44, 0.0, 2.71], [1.22, 0.381051, 2.71], [0.78, 0.381051, 2.71], [0.56, 0.0, 2.71], [0.78, -0.381051, 2.71], [1.22, -0.381051, 2.71], [0.897825, 0.0, 1.584163], [0.760657, 0.381051, 1.756166], [0.486322, 0.381051, 2.100171], [0.349154, 0.0, 2.272174], [0.486322, -0.381051, 2.100172], [0.760657, -0.381051, 1.756166], [-0.32043, 0.0, 1.306104], [-0.271476, 0.381051, 1.520588], [-0.173566, 0.381051, 1.949556], [-0.124612, 0.0, 2.16404], [-0.173566, -0.381051, 1.949556], [-0.271476, -0.381051, 1.520588], [-1.297395, 0.0, 2.085207], [-1.099182, 0.381051, 2.180662], [-0.702756, 0.381051, 2.371571], [-0.504543, 0.0, 2.467025], [-0.702756, -0.381051, 2.371571], [-1.099182, -0.381051, 2.180662], [-1.297395, 0.0, 3.334792], [-1.099182, 0.381051, 3.239338], [-0.702756, 0.381051, 3.048429], [-0.504543, 0.0, 2.952975], [-0.702756, -0.381051, 3.048429], [-1.099182, -0.381051, 3.239338], [-0.32043, 0.0, 4.113896], [-0.271476, 0.381051, 3.899412], [-0.173566, 0.381051, 3.470444], [-0.124612, 0.0, 3.25596], [-0.173566, -0.381051, 3.470444], [-0.271476, -0.381051, 3.899412], [0.897825, 0.0, 3.835838], [0.760657, 0.381051, 3.663835], [0.486322, 0.381051, 3.319829], [0.349154, 0.0, 3.147826], [0.486322, -0.381051, 3.319829], [0.760657, -0.381051, 3.663835], [0.0, 0.35, -2.88211], [0.0, -0.8, -2.88211], [0.6, 0.35, -2.88211], [1.0, 0.0, -2.88211], [0.374094, 0.35, -2.413011], [0.62349, 0.0, -2.100278], [-0.133513, 0.35, -2.297153], [-0.222521, 0.0, -1.907182], [-0.540581, 0.35, -2.621779], [-0.900969, 0.0, -2.448226], [-0.540581, 0.35, -3.14244], [-0.900969, 0.0, -3.315993], [-0.133513, 0.35, -3.467066], [-0.222521, 0.0, -3.857038], [0.374094, 0.35, -3.351209], [0.623489, 0.0, -3.663941]]
normals = [[-1.0, -0.0, -0.0], [-0.0, -0.0, -1.0], [1.0, -0.0, -0.0], [-0.0, -0.0, 1.0], [-0.0, -1.0, -0.0], [-0.0, 1.0, -0.0], [0.1876, -0.7947, 0.5774], [0.6071, -0.7947, -0.0], [-0.4911, -0.7947, 0.3568], [-0.4911, -0.7947, -0.3568], [0.1876, -0.7947, -0.5774], [0.9822, -0.1876, -0.0], [0.3035, -0.1876, 0.9342], [-0.7946, -0.1876, 0.5774], [-0.7946, -0.1876, -0.5774], [0.3035, -0.1876, -0.9342], [0.7946, 0.1876, 0.5774], [-0.3035, 0.1876, 0.9342], [-0.9822, 0.1876, -0.0], [-0.3035, 0.1876, -0.9342], [0.7946, 0.1876, -0.5774], [0.4911, 0.7947, 0.3568], [-0.1876, 0.7947, 0.5774], [-0.6071, 0.7947, -0.0], [-0.1876, 0.7947, -0.5774], [0.4911, 0.7947, -0.3568], [0.4795, 0.5783, -0.66], [0.7759, 0.5783, 0.2521], [-0.0, 0.5783, 0.8158], [-0.0, -1.0, -0.0], [-0.7759, 0.5783, 0.2521], [-0.4795, 0.5783, -0.66], [0.2588, -0.0, -0.9659], [0.7071, -0.0, -0.7071], [0.9659, -0.0, -0.2588], [0.9659, -0.0, 0.2588], [0.7071, -0.0, 0.7071], [0.2588, -0.0, 0.9659], [-0.2588, -0.0, 0.9659], [-0.7071, -0.0, 0.7071], [-0.9659, -0.0, 0.2588], [-0.9659, -0.0, -0.2588], [-0.0, 1.0, -0.0], [-0.7071, -0.0, -0.7071], [-0.2588, -0.0, -0.9659], [-0.0, -1.0, -0.0], [0.7993, 0.4615, -0.3849], [-0.0, 1.0, -0.0], [-0.7993, 0.4615, 0.3849], [-0.7993, -0.4615, 0.3849], [-0.0, -1.0, -0.0], [0.7993, -0.4615, -0.3849], [0.1974, 0.4615, -0.8649], [-0.1974, 0.4615, 0.8649], [-0.1974, -0.4615, 0.8649], [0.1974, -0.4615, -0.8649], [-0.5531, 0.4615, -0.6936], [0.5531, 0.4615, 0.6936], [0.5531, -0.4615, 0.6936], [-0.5531, -0.4615, -0.6936], [-0.8872, 0.4615, -0.0], [0.8872, 0.4615, -0.0], [0.8872, -0.4615, -0.0], [-0.8872, -0.4615, -0.0], [-0.5531, 0.4615, 0.6936], [0.5531, 0.4615, -0.6936], [0.5531, -0.4615, -0.6936], [-0.5531, -0.4615, 0.6936], [0.1974, 0.4615, 0.8649], [-0.1974, 0.4615, -0.8649], [-0.1974, -0.4615, -0.8649], [0.1974, -0.4615, 0.8649], [0.7993, 0.4615, 0.3849], [-0.7993, 0.4615, -0.3849], [-0.7993, -0.4615, -0.3849], [0.7993, -0.4615, 0.3849], [0.5982, -0.7478, -0.2881], [0.5982, -0.7478, 0.2881], [0.1477, -0.7478, 0.6473], [-0.414, -0.7478, 0.5191], [-0.664, -0.7478, -0.0], [-0.414, -0.7478, -0.5191], [0.1477, -0.7478, -0.6473], [0.6277, 0.7174, -0.3023], [0.6277, 0.7174, 0.3023], [0.155, 0.7174, 0.6792], [-0.4344, 0.7174, 0.5447], [-0.6967, 0.7174, -0.0], [-0.4344, 0.7174, -0.5447], [0.155, 0.7174, -0.6792], [-0.0, 1.0, -0.0]]
faces = [[1, 2, 0, 0, 0, 0], [3, 6, 2, 1, 1, 1], [7, 4, 6, 2, 2, 2], [5, 0, 4, 3, 3, 3], [6, 0, 2, 4, 4, 4], [3, 5, 7, 5, 5, 5], [1, 3, 2, 0, 0, 0], [3, 7, 6, 1, 1, 1], [7, 5, 4, 2, 2, 2], [5, 1, 0, 3, 3, 3], [6, 4, 0, 4, 4, 4], [3, 1, 5, 5, 5, 5], [8, 9, 10, 6, 6, 6], [9, 8, 13, 7, 7, 7], [8, 10, 11, 8, 8, 8], [8, 11, 12, 9, 9, 9], [8, 12, 13, 10, 10, 10], [9, 13, 18, 11, 11, 11], [10, 9, 14, 12, 12, 12], [11, 10, 15, 13, 13, 13], [12, 11, 16, 14, 14, 14], [13, 12, 17, 15, 15, 15], [9, 18, 14, 16, 16, 16], [10, 14, 15, 17, 17, 17], [11, 15, 16, 18, 18, 18], [12, 16, 17, 19, 19, 19], [13, 17, 18, 20, 20, 20], [14, 18, 19, 21, 21, 21], [15, 14, 19, 22, 22, 22], [16, 15, 19, 23, 23, 23], [17, 16, 19, 24, 24, 24], [18, 17, 19, 25, 25, 25], [20, 25, 21, 26, 26, 26], [21, 25, 22, 27, 27, 27], [22, 25, 23, 28, 28, 28], [21, 23, 24, 29, 29, 29], [23, 25, 24, 30, 30, 30], [24, 25, 20, 31, 31, 31], [24, 20, 21, 29, 29, 29], [21, 22, 23, 29, 29, 29], [27, 28, 26, 32, 32, 32], [29, 30, 28, 33, 33, 33], [31, 32, 30, 34, 34, 34], [33, 34, 32, 35, 35, 35], [35, 36, 34, 36, 36, 36], [37, 38, 36, 37, 37, 37], [39, 40, 38, 38, 38, 38], [41, 42, 40, 39, 39, 39], [43, 44, 42, 40, 40, 40], [45, 46, 44, 41, 41, 41], [47, 39, 31, 42, 42, 42], [47, 48, 46, 43, 43, 43], [49, 26, 48, 44, 44, 44], [32, 40, 48, 45, 45, 45], [27, 29, 28, 32, 32, 32], [29, 31, 30, 33, 33, 33], [31, 33, 32, 34, 34, 34], [33, 35, 34, 35, 35, 35], [35, 37, 36, 36, 36, 36], [37, 39, 38, 37, 37, 37], [39, 41, 40, 38, 38, 38], [41, 43, 42, 39, 39, 39], [43, 45, 44, 40, 40, 40], [45, 47, 46, 41, 41, 41], [31, 29, 27, 42, 42, 42], [27, 49, 47, 42, 42, 42], [47, 45, 43, 42, 42, 42], [43, 41, 39, 42, 42, 42], [39, 37, 35, 42, 42, 42], [35, 33, 31, 42, 42, 42], [31, 27, 47, 42, 42, 42], [47, 43, 39, 42, 42, 42], [39, 35, 31, 42, 42, 42], [47, 49, 48, 43, 43, 43], [49, 27, 26, 44, 44, 44], [48, 26, 28, 45, 45, 45], [28, 30, 32, 45, 45, 45], [32, 34, 36, 45, 45, 45], [36, 38, 40, 45, 45, 45], [40, 42, 44, 45, 45, 45], [44, 46, 48, 45, 45, 45], [48, 28, 32, 45, 45, 45], [32, 36, 40, 45, 45, 45], [40, 44, 48, 45, 45, 45], [56, 51, 50, 46, 46, 46], [51, 58, 52, 47, 47, 47], [52, 59, 53, 48, 48, 48], [59, 54, 53, 49, 49, 49], [60, 55, 54, 50, 50, 50], [61, 50, 55, 51, 51, 51], [62, 57, 56, 52, 52, 52], [63, 58, 57, 47, 47, 47], [58, 65, 59, 53, 53, 53], [65, 60, 59, 54, 54, 54], [66, 61, 60, 50, 50, 50], [61, 62, 56, 55, 55, 55], [68, 63, 62, 56, 56, 56], [69, 64, 63, 47, 47, 47], [70, 65, 64, 57, 57, 57], [71, 66, 65, 58, 58, 58], [72, 67, 66, 50, 50, 50], [73, 62, 67, 59, 59, 59], [74, 69, 68, 60, 60, 60], [75, 70, 69, 47, 47, 47], [76, 71, 70, 61, 61, 61], [77, 72, 71, 62, 62, 62], [72, 79, 73, 50, 50, 50], [79, 68, 73, 63, 63, 63], [80, 75, 74, 64, 64, 64], [81, 76, 75, 47, 47, 47], [82, 77, 76, 65, 65, 65], [83, 78, 77, 66, 66, 66], [84, 79, 78, 50, 50, 50], [79, 80, 74, 67, 67, 67], [86, 81, 80, 68, 68, 68], [81, 88, 82, 47, 47, 47], [88, 83, 82, 69, 69, 69], [89, 84, 83, 70, 70, 70], [90, 85, 84, 50, 50, 50], [91, 80, 85, 71, 71, 71], [86, 51, 87, 72, 72, 72], [51, 88, 87, 47, 47, 47], [52, 89, 88, 73, 73, 73], [53, 90, 89, 74, 74, 74], [54, 91, 90, 50, 50, 50], [91, 50, 86, 75, 75, 75], [56, 57, 51, 46, 46, 46], [51, 57, 58, 47, 47, 47], [52, 58, 59, 48, 48, 48], [59, 60, 54, 49, 49, 49], [60, 61, 55, 50, 50, 50], [61, 56, 50, 51, 51, 51], [62, 63, 57, 52, 52, 52], [63, 64, 58, 47, 47, 47], [58, 64, 65, 53, 53, 53], [65, 66, 60, 54, 54, 54], [66, 67, 61, 50, 50, 50], [61, 67, 62, 55, 55, 55], [68, 69, 63, 56, 56, 56], [69, 70, 64, 47, 47, 47], [70, 71, 65, 57, 57, 57], [71, 72, 66, 58, 58, 58], [72, 73, 67, 50, 50, 50], [73, 68, 62, 59, 59, 59], [74, 75, 69, 60, 60, 60], [75, 76, 70, 47, 47, 47], [76, 77, 71, 61, 61, 61], [77, 78, 72, 62, 62, 62], [72, 78, 79, 50, 50, 50], [79, 74, 68, 63, 63, 63], [80, 81, 75, 64, 64, 64], [81, 82, 76, 47, 47, 47], [82, 83, 77, 65, 65, 65], [83, 84, 78, 66, 66, 66], [84, 85, 79, 50, 50, 50], [79, 85, 80, 67, 67, 67], [86, 87, 81, 68, 68, 68], [81, 87, 88, 47, 47, 47], [88, 89, 83, 69, 69, 69], [89, 90, 84, 70, 70, 70], [90, 91, 85, 50, 50, 50], [91, 86, 80, 71, 71, 71], [86, 50, 51, 72, 72, 72], [51, 52, 88, 47, 47, 47], [52, 53, 89, 73, 73, 73], [53, 54, 90, 74, 74, 74], [54, 55, 91, 50, 50, 50], [91, 55, 50, 75, 75, 75], [95, 93, 107, 76, 76, 76], [93, 95, 97, 77, 77, 77], [93, 97, 99, 78, 78, 78], [93, 99, 101, 79, 79, 79], [93, 101, 103, 80, 80, 80], [93, 103, 105, 81, 81, 81], [93, 105, 107, 82, 82, 82], [95, 106, 94, 83, 83, 83], [94, 97, 95, 84, 84, 84], [96, 99, 97, 85, 85, 85], [98, 101, 99, 86, 86, 86], [100, 103, 101, 87, 87, 87], [102, 105, 103, 88, 88, 88], [104, 107, 105, 89, 89, 89], [92, 94, 106, 90, 90, 90], [94, 92, 96, 90, 90, 90], [96, 92, 98, 90, 90, 90], [98, 92, 100, 90, 90, 90], [100, 92, 102, 90, 90, 90], [102, 92, 104, 90, 90, 90], [104, 92, 106, 90, 90, 90], [95, 107, 106, 83, 83, 83], [94, 96, 97, 84, 84, 84], [96, 98, 99, 85, 85, 85], [98, 100, 101, 86, 86, 86], [100, 102, 103, 87, 87, 87], [102, 104, 105, 88, 88, 88], [104, 106, 107, 89, 89, 89]]



playground = getPlayground()
playground.enableRepaint(False)
setPenColor("Black")

t = 0
while True:
    tranf_mat = matrix_multiply(projection_matrix, translation_matrix([0, 0, -7]))
    tranf_mat = matrix_multiply(tranf_mat, rotation_matrix_x(sin(t*1.5)/2))
    tranf_mat = matrix_multiply(tranf_mat, rotation_matrix_y(t))

    tranf_verts = []
    for vertex in vertices:
        vert = matrix_vector_multiply(tranf_mat, vertex + [1])
        tranf_verts.append([vert[v] / vert[3] for v in range(0, 3)])
    
    

    playground.clear()
    for face in sorted(faces, key=poly_sort):
        pos = [tranf_verts[face[tri]] for tri in range(0, 3)]
        
        if is_visible(pos):
            color = [n*0.5+0.5 for n in normals[face[3]]]

            
            setPenColor(color)
            setFillColor(color)
            draw_triangle(pos)

    
    playground.repaint()
    t += 0.001