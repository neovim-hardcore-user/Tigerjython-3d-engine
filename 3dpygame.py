import pygame
from math import *


screen = pygame.display.set_mode((1000, 1000))

screen_size = 1000

def draw_triangle(pos):
    setPos(pos[0])
    startPath()
    moveTo(pos[1])
    moveTo(pos[2])
    #moveTo(pos[0]) #
    fillPath()

def matrix_multiply(matrix, vector):
    result = [sum(matrix[i][j] * vector[j] for j in range(len(vector))) for i in range(len(matrix))]
    return result
    
def add(vec1, vec2):
    return [x + y for x, y in zip(vec1, vec2)]

def sub(vec1, vec2):
    return [x - y for x, y in zip(vec1, vec2)]
    
def mul(vec, scalar):
    return [x * scalar for x in vec]
    
def div(vec, scalar):
    return [x / scalar for x in vec]
    
def dot_product(vector1, vector2):
    return sum(x * y for x, y in zip(vector1, vector2))

def cross_product(v1, v2):
    return [v1[1] * v2[2] - v1[2] * v2[1], v1[2] * v2[0] - v1[0] * v2[2], v1[0] * v2[1] - v1[1] * v2[0]]
    
def normalize(vector):
    length = sqrt(sum(x * x for x in vector))
    return [x / length for x in vector] if length != 0 else vector

def perspective_matrix(aspect_ratio, fov_y, near, far):
    tan_half_fov_y = tan(fov_y / 2)
    range_inv = 1 / (far - near)

    return [
        [1 / (aspect_ratio * tan_half_fov_y), 0, 0, 0],
        [0, 1 / tan_half_fov_y, 0, 0],
        [0, 0, -(far + near) * range_inv, -2 * far * near * range_inv],
        [0, 0, -1, 0]
    ]

def translation_matrix(translation_vector):
    return [
        [1, 0, 0, translation_vector[0]],
        [0, 1, 0, translation_vector[1]],
        [0, 0, 1, translation_vector[2]],
        [0, 0, 0, 1]
    ]

def scale_matrix(scale_vector):
    return [
        [scale_vector[0], 0, 0, 0],
        [0, scale_vector[1], 0, 0],
        [0, 0, scale_vector[2], 0],
        [0, 0, 0, 1]
    ]




def project_vertices(vertices, projection_matrix):
    projected_vertices = []
    for vertex in vertices:
        projected_vertex = matrix_multiply(projection_matrix, vertex + [1])
        scale = (1 / projected_vertex[3]) * screen_size
        projected_vertices.append([projected_vertex[0]*scale +  screen_size/2, projected_vertex[1]*-scale +  screen_size/2, projected_vertex[2]])
    return projected_vertices

def translate(vertices, translation_vector):
    translation_matrix_ = translation_matrix(translation_vector)
    translated_vertices = [matrix_multiply(translation_matrix_, vertex + [1])[:3] for vertex in vertices]
    return translated_vertices

def scale(vertices, scale_vector):
    scale_matrix_ = scale_matrix(scale_vector)
    scaled_vertices = [matrix_multiply(scale_matrix_, vertex + [1])[:3] for vertex in vertices]
    return scaled_vertices
    
def rotate_x(vertices, theta):
    rotation_matrix_x = [
        [1, 0, 0, 0],
        [0, cos(theta), -sin(theta), 0],
        [0, sin(theta), cos(theta), 0],
        [0, 0, 0, 1]
    ]
    return [matrix_multiply(rotation_matrix_x, vertex + [1])[:3] for vertex in vertices]

def rotate_y(vertices, theta):
    rotation_matrix_y = [
        [cos(theta), 0, sin(theta), 0],
        [0, 1, 0, 0],
        [-sin(theta), 0, cos(theta), 0],
        [0, 0, 0, 1]
    ]
    return [matrix_multiply(rotation_matrix_y, vertex + [1])[:3] for vertex in vertices]

def rotate_z(vertices, theta):
    rotation_matrix_z = [
        [cos(theta), -sin(theta), 0, 0],
        [sin(theta), cos(theta), 0, 0],
        [0, 0, 1, 0],
        [0, 0, 0, 1]
    ]
    return [matrix_multiply(rotation_matrix_z, vertex + [1])[:3] for vertex in vertices]

def rotate(vertices, angles):
    rx, ry, rz = angles
    rotated_vertices = rotate_x(vertices, rx)
    rotated_vertices = rotate_y(rotated_vertices, ry)
    rotated_vertices = rotate_z(rotated_vertices, rz)
    return rotated_vertices
    
def compute_normal(pos):
    vector1 = sub(pos[0], pos[1])
    vector2 = sub(pos[2], pos[1])
    
    normal = cross_product(vector1, vector2)
    
    
    return normalize(normal)

def poly_sort(poly):
    return -(pv[poly[0]][2] + pv[poly[1]][2] + pv[poly[2]][2])

projection_matrix = perspective_matrix(1, radians(90), 0.1, 100)


vertices = [[0.0, -1.0, 0.0], [0.7236, -0.447215, 0.52572], [-0.276385, -0.447215, 0.85064], [-0.894425, -0.447215, 0.0], [-0.276385, -0.447215, -0.85064], [0.7236, -0.447215, -0.52572], [0.276385, 0.447215, 0.85064], [-0.7236, 0.447215, 0.52572], [-0.7236, 0.447215, -0.52572], [0.276385, 0.447215, -0.85064], [0.894425, 0.447215, 0.0], [0.0, 1.0, 0.0], [2.324432, -0.56, -0.7], [2.324432, 0.56, -0.7], [2.990171, -0.56, -0.216312], [2.990171, 0.56, -0.216312], [2.735881, -0.56, 0.566312], [2.735881, 0.56, 0.566312], [1.912982, -0.56, 0.566312], [1.912982, 0.56, 0.566312], [1.658692, -0.56, -0.216312], [1.658692, 0.56, -0.216312], [0.0, 1.277585, -0.88], [0.762102, 1.277585, -0.44], [0.762102, 1.277585, 0.44], [0.0, 1.277585, 0.88], [-0.762102, 1.277585, 0.44], [-0.762102, 1.277585, -0.44], [0.0, 2.277585, 0.0], [1.25, 0.0, -2.250942], [1.125, 0.216506, -2.250942], [0.875, 0.216506, -2.250942], [0.75, 0.0, -2.250942], [0.875, -0.216506, -2.250942], [1.125, -0.216506, -2.250942], [0.625, 0.0, -3.333474], [0.5625, 0.216506, -3.225221], [0.4375, 0.216506, -3.008714], [0.375, 0.0, -2.900461], [0.4375, -0.216506, -3.008714], [0.5625, -0.216506, -3.225221], [-0.625, 0.0, -3.333474], [-0.5625, 0.216506, -3.225221], [-0.4375, 0.216506, -3.008714], [-0.375, 0.0, -2.900461], [-0.4375, -0.216506, -3.008714], [-0.5625, -0.216506, -3.225221], [-1.25, 0.0, -2.250942], [-1.125, 0.216506, -2.250942], [-0.875, 0.216506, -2.250942], [-0.75, 0.0, -2.250942], [-0.875, -0.216506, -2.250942], [-1.125, -0.216506, -2.250942], [-0.625, 0.0, -1.16841], [-0.5625, 0.216506, -1.276663], [-0.4375, 0.216506, -1.49317], [-0.375, 0.0, -1.601423], [-0.4375, -0.216506, -1.49317], [-0.5625, -0.216506, -1.276663], [0.625, 0.0, -1.16841], [0.5625, 0.216506, -1.276663], [0.4375, 0.216506, -1.49317], [0.375, 0.0, -1.601423], [0.4375, -0.216506, -1.49317], [0.5625, -0.216506, -1.276663], [-2.689991, -0.704129, 0.704129], [-2.689991, 0.704129, 0.704129], [-2.689991, -0.704129, -0.704129], [-2.689991, 0.704129, -0.704129], [-1.281732, -0.704129, 0.704129], [-1.281732, 0.704129, 0.704129], [-1.281732, -0.704129, -0.704129], [-1.281732, 0.704129, -0.704129], [-0.484034, 0.020155, 2.606177], [0.484034, 0.020155, 2.606177], [0.103827, 0.15985, 2.669507], [-0.103827, 0.15985, 2.669507], [0.393837, 0.378491, 2.819262], [0.15625, 0.4375, 2.677667], [-0.15625, 0.4375, 2.677667], [-0.464863, 0.413575, 2.573598], [-0.393837, 0.378491, 2.819262], [0.464863, 0.413575, 2.573598], [0.633263, 0.24203, 2.595723], [-0.633263, 0.24203, 2.595723], [-0.320532, 0.114372, 2.837929], [0.320532, 0.114372, 2.837929], [0.0, 0.372944, 2.818923], [0.0, -0.859401, 2.720895], [0.0, -0.1875, 2.826104], [0.0, 0.455016, 2.644344], [0.0, 0.739405, 1.270727], [0.0, -0.248586, 1.33675], [-0.226815, -0.192583, 2.562887], [0.226815, -0.192583, 2.562887], [-0.380003, -0.961727, 2.528368], [0.586132, -0.069318, 2.600818], [0.832894, 0.398588, 2.654324], [-0.238492, 0.773072, 2.740525], [0.224125, 0.132533, 2.786681], [-0.096071, -0.81117, 2.732821], [0.0, -0.195312, 2.779229], [0.0, -0.140625, 2.771417], [-0.586132, -0.069318, 2.600818], [-0.832894, 0.398588, 2.654324], [-0.224831, 0.55252, 2.827993], [0.224831, 0.55252, 2.827993], [-0.12315, -0.178023, 2.804646], [0.0, -0.302549, 2.813348], [0.12315, -0.178023, 2.804646], [0.096071, -0.81117, 2.732821], [-0.324415, 0.390499, 2.836053], [-0.553093, 0.260929, 2.722846], [-0.414048, 0.075581, 2.734605], [0.197297, 0.296692, 2.790817], [-0.197297, 0.296692, 2.790817], [0.324415, 0.390499, 2.836053], [0.414048, 0.075581, 2.734605], [0.553093, 0.260929, 2.722846], [-0.224125, 0.132533, 2.786681], [-0.331326, 0.565155, 2.559914], [0.238492, 0.773072, 2.740525], [-0.785346, 0.119346, 2.447115], [0.785346, 0.119346, 2.447115], [0.0, 0.976525, 2.220001], [0.0, -0.955036, 2.436022], [0.0, -0.4861, 2.327788], [0.85475, 0.356817, 1.840843], [-0.852752, 0.400749, 1.582975], [-0.748555, -0.110008, 1.701538], [-0.214052, -0.41023, 2.371137], [0.380003, -0.961727, 2.528368], [0.214052, -0.41023, 2.371137], [-0.71398, 0.702071, 1.65921], [-0.476077, 0.899132, 2.158056], [0.476077, 0.899132, 2.158056], [0.331326, 0.565155, 2.559914], [-0.755597, 0.411716, 2.346116], [0.755597, 0.411716, 2.346116], [0.71398, 0.702071, 1.65921], [-0.394325, -0.238686, 1.695698], [0.394325, -0.238686, 1.695698], [-0.717301, -0.102008, 1.931494], [-1.381379, 0.178077, 1.542842], [-1.090323, 0.422107, 1.659628], [1.20797, 0.310146, 1.588322], [1.090323, 0.422107, 1.659628], [0.717301, -0.102008, 1.931494], [-1.147014, 0.048217, 1.591349], [0.73678, 0.072512, 1.794978], [-0.73678, 0.072512, 1.794978], [-0.85475, 0.356817, 1.840843], [-0.864912, 0.016082, 1.71497], [1.147014, 0.048217, 1.591349], [0.864912, 0.016082, 1.71497], [-1.20797, 0.310146, 1.588322], [-1.227002, 0.480829, 1.476402], [1.227002, 0.480829, 1.476402], [1.381379, 0.178077, 1.542842], [0.748555, -0.110008, 1.701538], [0.852752, 0.400749, 1.582975]]
faces = [[0, 1, 2], [1, 0, 5], [0, 2, 3], [0, 3, 4], [0, 4, 5], [1, 5, 10], [2, 1, 6], [3, 2, 7], [4, 3, 8], [5, 4, 9], [1, 10, 6], [2, 6, 7], [3, 7, 8], [4, 8, 9], [5, 9, 10], [6, 10, 11], [7, 6, 11], [8, 7, 11], [9, 8, 11], [10, 9, 11], [13, 14, 12], [15, 16, 14], [17, 18, 16], [13, 19, 17], [19, 20, 18], [21, 12, 20], [14, 18, 20], [13, 15, 14], [15, 17, 16], [17, 19, 18], [17, 15, 13], [13, 21, 19], [19, 21, 20], [21, 13, 12], [20, 12, 14], [14, 16, 18], [22, 28, 23], [23, 28, 24], [24, 28, 25], [25, 28, 26], [23, 25, 27], [26, 28, 27], [27, 28, 22], [27, 22, 23], [23, 24, 25], [25, 26, 27], [35, 30, 29], [36, 31, 30], [37, 32, 31], [38, 33, 32], [39, 34, 33], [34, 35, 29], [41, 36, 35], [42, 37, 36], [43, 38, 37], [44, 39, 38], [45, 40, 39], [46, 35, 40], [47, 42, 41], [42, 49, 43], [49, 44, 43], [50, 45, 44], [51, 46, 45], [46, 47, 41], [53, 48, 47], [54, 49, 48], [55, 50, 49], [56, 51, 50], [57, 52, 51], [58, 47, 52], [59, 54, 53], [60, 55, 54], [61, 56, 55], [62, 57, 56], [57, 64, 58], [64, 53, 58], [29, 60, 59], [30, 61, 60], [31, 62, 61], [32, 63, 62], [33, 64, 63], [34, 59, 64], [35, 36, 30], [36, 37, 31], [37, 38, 32], [38, 39, 33], [39, 40, 34], [34, 40, 35], [41, 42, 36], [42, 43, 37], [43, 44, 38], [44, 45, 39], [45, 46, 40], [46, 41, 35], [47, 48, 42], [42, 48, 49], [49, 50, 44], [50, 51, 45], [51, 52, 46], [46, 52, 47], [53, 54, 48], [54, 55, 49], [55, 56, 50], [56, 57, 51], [57, 58, 52], [58, 53, 47], [59, 60, 54], [60, 61, 55], [61, 62, 56], [62, 63, 57], [57, 63, 64], [64, 59, 53], [29, 30, 60], [30, 31, 61], [31, 32, 62], [32, 33, 63], [33, 34, 64], [34, 29, 59], [66, 67, 65], [68, 71, 67], [72, 69, 71], [70, 65, 69], [71, 65, 67], [68, 70, 72], [66, 68, 67], [68, 72, 71], [72, 70, 69], [70, 66, 65], [71, 69, 65], [68, 66, 70], [77, 86, 83], [85, 81, 84], [86, 77, 75], [81, 85, 76], [81, 76, 79], [81, 79, 80], [83, 82, 77], [94, 96, 109], [103, 93, 107], [97, 96, 123], [98, 104, 105], [87, 106, 121], [97, 106, 118], [103, 112, 104], [109, 96, 99], [99, 87, 109], [87, 119, 107], [105, 115, 87], [119, 87, 115], [110, 88, 131], [88, 100, 95], [109, 110, 131], [100, 107, 95], [109, 88, 110], [107, 88, 108], [89, 102, 101], [89, 102, 107], [102, 109, 87], [107, 102, 87], [96, 118, 117], [112, 103, 113], [105, 112, 111], [114, 116, 106], [87, 136, 90], [120, 87, 90], [97, 136, 121], [104, 120, 137], [123, 138, 97], [126, 131, 125], [126, 95, 130], [93, 103, 122], [129, 92, 140], [92, 132, 126], [130, 92, 126], [123, 147, 127], [142, 122, 151], [160, 92, 91], [128, 92, 129], [124, 139, 91], [133, 124, 91], [135, 138, 139], [137, 134, 133], [136, 124, 90], [120, 124, 134], [122, 137, 151], [127, 139, 138], [133, 151, 137], [139, 127, 160], [123, 141, 147], [140, 122, 142], [123, 94, 141], [93, 122, 140], [94, 132, 141], [140, 130, 93], [141, 159, 147], [144, 143, 155], [155, 143, 148], [153, 147, 158], [147, 154, 149], [152, 142, 150], [151, 144, 150], [142, 151, 150], [153, 154, 147], [154, 145, 146], [155, 152, 144], [154, 146, 149], [144, 152, 150], [155, 148, 152], [158, 157, 146], [146, 157, 127], [151, 128, 156], [159, 160, 157], [157, 158, 159], [143, 156, 129], [83, 86, 74], [73, 85, 84], [74, 86, 75], [76, 85, 73], [77, 78, 75], [77, 82, 78], [84, 81, 80], [94, 109, 131], [95, 107, 93], [104, 122, 103], [121, 106, 97], [87, 98, 105], [104, 112, 105], [96, 97, 118], [107, 119, 103], [106, 87, 114], [99, 114, 87], [109, 108, 88], [107, 100, 88], [89, 109, 102], [89, 108, 109], [107, 108, 89], [99, 96, 117], [113, 103, 119], [106, 116, 118], [115, 105, 111], [87, 121, 136], [120, 98, 87], [97, 138, 136], [104, 98, 120], [122, 104, 137], [126, 132, 131], [126, 125, 95], [131, 88, 125], [125, 88, 95], [94, 131, 132], [130, 95, 93], [94, 123, 96], [159, 141, 92], [92, 141, 132], [130, 140, 92], [160, 159, 92], [128, 91, 92], [124, 135, 139], [133, 134, 124], [91, 139, 160], [128, 133, 91], [135, 136, 138], [137, 120, 134], [136, 135, 124], [120, 90, 124], [123, 127, 138], [133, 128, 151], [140, 142, 129], [146, 145, 158], [145, 153, 158], [148, 143, 142], [127, 149, 146], [147, 149, 127], [148, 142, 152], [145, 154, 153], [158, 147, 159], [129, 142, 143], [143, 144, 156], [144, 151, 156], [127, 157, 160], [129, 156, 128]]
 

r = 0
while True:
    tv = rotate_y(vertices, r)
    tv = rotate_x(tv, sin(r * 2))
    tv = translate(tv, [0, 0, -7])
    
    
    pv = project_vertices(tv, projection_matrix)
    
    screen.fill((255, 255, 255))
    for i in sorted(faces, key=poly_sort):
        pos = [pv[i[0]][:2], pv[i[1]][:2], pv[i[2]][:2]]
        avpos = div(add(add(tv[i[0]], tv[i[1]]), tv[i[2]]), 3)
        dif = max(dot_product(compute_normal([tv[i[0]], tv[i[1]], tv[i[2]]]), normalize(avpos)), 0.0)
        
        if dif > 0:
            dif = dif * 150 + 50
            color = (dif, dif, dif)
            pygame.draw.polygon(screen, color, pos, 0)

    pygame.display.update()
    r += 0.005
